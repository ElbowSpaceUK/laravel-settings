{"0": {
    "doc": "Get Settings",
    "title": "Get Settings",
    "content": ". | Getting a setting value . | Getting values for types | Aliases | . | Getting multiple setting information | Multi-tenancy . | Setting the tenant | . | . ",
    "url": "/get-settings",
    "relUrl": "/get-settings"
  },"1": {
    "doc": "Get Settings",
    "title": "Getting a setting value",
    "content": "The easiest way to get the value of a setting is by referencing the setting class directly, e.g. \\Acme\\Setting\\SiteName::getValue(). You can also use . | The facade: \\Settings\\Setting::getValue(\\Acme\\Setting\\SiteName::class) | The helper: settings(\\Settings\\Setting::class) | . Getting values for types . For setting types like users and teams, where the setting value depends on the session, you can use the same function. This will automatically resolve the current user/team/model from the session and use that. If you do pass an ID in as the first parameter though, it will get the setting value for the given model instead. Aliases . For common settings, you can alias the getters to a single function. Rather than using \\Settings\\Setting::getValue(\\Acme\\Setting\\SiteName::class), you can use \\Settings\\Setting::getSiteName(). By doing this you won’t get IDE typehinting, but it is a more concise way to refer to settings. To alias a setting like this, add it to the config file . &lt;?php return [ 'aliases' =&gt; [ 'SiteName' =&gt; \\Acme\\Setting\\SiteName::class, ... ] ]; . If the setting name is ambiguous (e.g. there’s no other setting with the same name, not including the FQDN), then the alias will be automatically set up. ",
    "url": "/get-settings#getting-a-setting-value",
    "relUrl": "/get-settings#getting-a-setting-value"
  },"2": {
    "doc": "Get Settings",
    "title": "Getting multiple setting information",
    "content": "To display the settings to users, you need to get information about the registered settings. These all use the setting service class, which you can access through the facade or the helper (passing it no parameters). Groups . | Get all settings with a given group: \\Settings\\Setting::withGroup('group-name')-&gt;get() | Get all settings with at least one of the given groups: settings()-&gt;withAnyGroups(['group-name', 'group-name-2'])-&gt;get() | Get all settings that have all the given groups: settings()-&gt;withAllGroups(['group-name', 'group-name-2'])-&gt;get() | . Types . | Get all settings of a certain type: settings()-&gt;withType(\\Acme\\Setting\\TeamSettingType::class)-&gt;get() | Get all global settings: settings()-&gt;withGlobal()-&gt;get(). This is the same as calling settings()-&gt;withType(\\Settings\\Schema\\GlobalSetting::class). | Get all user settings: settings()-&gt;withUser()-&gt;get(). | . The functions can be chained, so to get all global settings that belong to a group called ‘Blog Module’, you’d use \\Settings\\Setting::withGlobal()-&gt;withGroup('blog-module')-&gt;get(). These will all return a Settings\\Support\\SettingCollection instance. You can use this like a normal Laravel collection, but you will also have access to the following functions. | asForm() - turn the settings into a \\FormSchema\\Schema\\Form. | toKeyValuePair() - get all settings and their values as key value pairs. | . Needs method documenting . When using asForm, you can change how a collection casts settings to a form. ",
    "url": "/get-settings#getting-multiple-setting-information",
    "relUrl": "/get-settings#getting-multiple-setting-information"
  },"3": {
    "doc": "Get Settings",
    "title": "Multi-tenancy",
    "content": "To support multi tenancy, you can set a tenant during the boot of your app. This will usually be an ID, but could be any unique string. When set, each tenant has their own settings and only their settings are queried. Setting the tenant . In the boot method of your service provider, you should add . \\Settings\\Setting::resolveTenantKeyUsing(function(): ?string { // Get the tenant key }); . In this closure, you can resolve the tenant from the route/session/anywhere else, and return a string unique to that tenant (such as their ID as a string, or some other unique key). If you return null, the default tenant will be used, which can be useful for public, non-tenanted parts of your site. ",
    "url": "/get-settings#multi-tenancy",
    "relUrl": "/get-settings#multi-tenancy"
  },"4": {
    "doc": "Introduction",
    "title": "Laravel Settings",
    "content": "Contents . | Introduction | Installation | Basic Usage . | Get a setting | Create a setting . | Class-based settings | . | Set a setting | . | . ",
    "url": "/index#laravel-settings",
    "relUrl": "/index#laravel-settings"
  },"5": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "Laravel Settings provides simple but flexible settings to any Laravel app. ",
    "url": "/index",
    "relUrl": "/index"
  },"6": {
    "doc": "Introduction",
    "title": "Installation",
    "content": "All you need to do to use this project is pull it into an existing Laravel app using composer. composer require twigger/laravel-settings . You can publish the configuration file by running . php artisan vendor:publish --provider=\"Settings\\SettingsServiceProvider\" . ",
    "url": "/index#installation",
    "relUrl": "/index#installation"
  },"7": {
    "doc": "Introduction",
    "title": "Basic Usage",
    "content": "Get a setting . echo \\Settings\\Setting::getValue('siteName') // My App . Create a setting . You can create settings in the service provider, in your boot method . public function boot() { \\Settings\\Setting::createGlobal('siteName', 'My App', Field::text('siteName')-&gt;setValue('My App')-&gt;setLabel('The name of the site')); \\Settings\\Setting::createUser('theme', 'default', Field::select('theme')-&gt;setValue('default')-&gt;setLabel('The theme to use')-&gt;withOption('default', 'Default')); } . Class-based settings . Class based settings let you do everything you can with normal settings, as well as letting you . | Use complex objects (that can’t be serialized by default) | Use more complex validation | Use the class name as the setting key, letting your IDE tell you when you’ve got something wrong. | . Set a setting . \\Settings\\Setting::setDefaultValue('theme', 'default-two'); // Set the default theme for users \\Settings\\Setting::setDefaultValue('theme', 'my-custom-theme', 2); // User with an ID of `2` sets their own value. ",
    "url": "/index#basic-usage",
    "relUrl": "/index#basic-usage"
  },"8": {
    "doc": "Integrate",
    "title": "Basic Usage",
    "content": ". | API . | Get a setting value . | Request | Response | . | Set a setting value(s) . | Request | Response | . | Get all setting values . | Request | Response | . | . | Validation | Creating a settings page | . ",
    "url": "/integrating#basic-usage",
    "relUrl": "/integrating#basic-usage"
  },"9": {
    "doc": "Integrate",
    "title": "API",
    "content": "This package comes with an API for updating the settings. Get a setting value . Request . GET /_setting/{key} HTTP/1.1 Accept: application/json Content-Type: application/json . Response . HTTP/1.1 200 OK Content-Type: application/json { \"setting\": { key: '', value: '', updated_at: '' } } . Set a setting value(s) . POST /setting [ {“value”: “setting-value”} ] . Request . POST /_setting HTTP/1.1 Accept: application/json Content-Type: application/json { \"settings\": { \"key1\": \"First setting\", \"key2\": \"Second setting\" ] } . Response . HTTP/1.1 204 No Content Content-Type: application/json . Get all setting values . Request . GET /_setting HTTP/1.1 Accept: application/json Content-Type: application/json . Response . HTTP/1.1 200 OK Content-Type: application/json { \"settings\": [ { key: '', value: '', updated_at: '' }, {...}, ] } . ",
    "url": "/integrating#api",
    "relUrl": "/integrating#api"
  },"10": {
    "doc": "Integrate",
    "title": "Validation",
    "content": "If you use your own API to update settings, or a standard web request, you can use the following validation rule to check all the given settings are valid according to their validation rules . | settings - the given attribute must be an array of settings as key value pairs | . ",
    "url": "/integrating#validation",
    "relUrl": "/integrating#validation"
  },"11": {
    "doc": "Integrate",
    "title": "Creating a settings page",
    "content": "We’ve previously covered getting a Form instance from settings/groups of settings. Pass this schema to the frontend and render it using a dynamic form generator. Each setting group will appear in a different form group. ",
    "url": "/integrating#creating-a-settings-page",
    "relUrl": "/integrating#creating-a-settings-page"
  },"12": {
    "doc": "Integrate",
    "title": "Integrate",
    "content": " ",
    "url": "/integrating",
    "relUrl": "/integrating"
  },"13": {
    "doc": "JS",
    "title": "JavaScript",
    "content": ". | Vue | Setting Keys . | Aliases | . | JS | . ",
    "url": "/js#javascript",
    "relUrl": "/js#javascript"
  },"14": {
    "doc": "JS",
    "title": "Vue",
    "content": "Since the frontend makes use of the settings too, it’s easy to use this package directly from your js. You will need to install the js package. If using Vue, add the following to your app.js file. Here we use 1 as the model ID, replace with whatever the actual model ID is. import Settings from '@twigger/settings'; Vue.use(Settings); . Then in your Vue app . &lt;template&gt; Setting value: &lt;span v-text=\"$setting.get('key', 1)\"&gt;&lt;/span&gt; &lt;/template&gt; &lt;!--...--&gt; computed: { description() { return this.$setting.get('key', 1) } } . ",
    "url": "/js#vue",
    "relUrl": "/js#vue"
  },"15": {
    "doc": "JS",
    "title": "Setting Keys",
    "content": "On the PHP side, since all settings are class based it’s impossible to use the incorrect setting key. To keep this consistency in js, the keys can be retrieved from a json object. This is automatically generated for you. For our site name example (\\Acme\\Settings\\SiteName), this looks like . { acme: { settings: { siteName: SettingObject } } } . You can access this object with this.$setting.keys. If you don’t dig into the object you’ll have a list of all settings. If you dig through the namespaces to get a setting object, you can then call the following functions . | this.$setting.keys.acme.settings.siteName.get(1) - Get the value for the model with an ID 1 | this.$setting.keys.acme.settings.siteName.get() - Get the default value/global setting value | this.$setting.keys.acme.settings.siteName.set('value', 1) - Set the value for the model 1 | this.$setting.keys.acme.settings.siteName.set('value') - Set the default/global value | . Aliases . To make accessing these settings easier, the aliases referenced in the configuration will also be applied to these keys. If \\Acme\\Settings\\SiteName is aliases to SiteName, then you can access the JS key with this.$settings.aliases.siteName, where you can then call .get() or .set() as necessary. You can also just use this.$settings.siteName and omit aliases, but please note this may cause issues if your setting name is aliases or keys, or any other property of $settings, so it’s usually best to use the this.$settings.aliases key directly. ",
    "url": "/js#setting-keys",
    "relUrl": "/js#setting-keys"
  },"16": {
    "doc": "JS",
    "title": "JS",
    "content": "Using functions directly . import {getSetting, keys} from '@twigger/settings' getSetting('key', 1) // keys is an object of keys as above . ",
    "url": "/js",
    "relUrl": "/js"
  },"17": {
    "doc": "Set Settings",
    "title": "Set Settings",
    "content": ". | Set a setting value . | Setting types | . | Multi-tenancy | . ",
    "url": "/set-settings",
    "relUrl": "/set-settings"
  },"18": {
    "doc": "Set Settings",
    "title": "Set a setting value",
    "content": "To set a setting, you can use the setValue method on the setting, such as Acme\\Setting\\SiteName::setValue('New site name'). This will set the setting value, or throw a validation exception if there was a problem with the value. To set the default value of any setting, which is returned if the setting does not yet have a value, you can use Acme\\Setting\\SiteName::setDefaultValue('Default site name'). Or use the facade with \\Settings\\Setting::setDefaultValue(\\Acme\\Setting\\SiteName::class, 'Default Site Name'); . Setting types . Most setting types (such as user and team settings) have a value that depends on the current session. For these settings, you may pass in the ID of the user/team/model as a second parameter. \\Acme\\Setting\\Team2FAEnabled::setValue(true, 5) will enable 2FA for the team with an ID of 5. For the settings that depend on a model like this, if you don’t pass an ID in as the second parameter it will be automatically resolved from the session. To update the default, which will affect any users that haven’t changed their settings yet, you can use \\Acme\\Setting\\Team2FAEnabled::setDefaultValue(true) to enable 2FA by default. ",
    "url": "/set-settings#set-a-setting-value",
    "relUrl": "/set-settings#set-a-setting-value"
  },"19": {
    "doc": "Set Settings",
    "title": "Multi-tenancy",
    "content": "When using multi-tenancy tools to provide settings to multiple tenants, setting the value of a setting as normal will always set it for the current tenant. You can set the default value for all tenants by using \\Settings\\Setting::withoutTenant()-&gt;setDefaultValue(\\Acme\\Setting\\SiteName::class, 'Default Site Name'). Any tenant who has not set the setting will get ‘Default Site Name’ as a response. If this is used without withoutTenant(), it will set the default value for the current tenant. ",
    "url": "/set-settings#multi-tenancy",
    "relUrl": "/set-settings#multi-tenancy"
  }
}
