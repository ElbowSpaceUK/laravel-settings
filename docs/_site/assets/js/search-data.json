{"0": {
    "doc": "Basic Usage",
    "title": "Basic Usage",
    "content": ". | Facade . | Target Language | Source Language | . | API . | Translating single lines . | Request | Response | . | Translating multiple lines . | Request | Response | . | Overriding the source and target language . | Request | Response | . | . | JavaScript | Blade | Helper Function | . ",
    "url": "http://localhost:4000/basic-usage",
    "relUrl": "/basic-usage"
  },"1": {
    "doc": "Basic Usage",
    "title": "Facade",
    "content": "The easiest way to translate any text is to use the Translate facade. The following line will translate ‘A string to translate’ from English to French. $frenchString = \\Translate\\Setting::translate('A string to translate', 'fr', 'en'); . The translate function takes the string to translate as the first argument, the language to translate to (the target language) as the second argument and the source language as the third. There is an alternative function called translateMany, which takes an array of strings rather than a single string. This is useful for efficiently translating multiple strings at the same time. $frenchStrings = \\Translate\\Setting::translateMany(['A string to translate', 'A second string to translate'], 'fr', 'en'); . These functions will return the string (or an array of strings) of translated text. If a given string couldn’t be translated, null will be returned (or one of the array elements). To provide a seamless integration, you should always return the original string if a translation failed. This common pattern can be achieved using the null coalescing operator. // Single line $line = 'A string to translate'; return \\Translate\\Setting::translate($line, 'fr', 'en') ?? $line; // Multiple Lines $lines = ['A string to translate', 'A second string to translate']; $translatedLines = \\Translate\\Setting::translateMany($lines, 'fr', 'en'); // PHP 7.4 return \\array_map(fn ($string, $index) =&gt; $string ?? $lines[$index], $translatedLines, array_keys($translatedLines)); // &lt;= PHP 7.3 return \\array_map(function($string, $index) use ($lines) { return $string ?? $lines[$index]; }, $translatedLines, array_keys($translatedLines)); . Target Language . The target language will depend on your end user. They may have the language set in their browser, your app may give them language options, or you may wish to use the default Laravel locale. To simplify the detection of this language, the Laravel Translate package provides a detection facade. $targetLocale = \\Translate\\Detect::lang(); . The strategies used to detect the requested locale can be modified, which is described further in the section. Source Language . The source language is required, as many websites may have content written in multiple languages. If this is not the case, we recommend passing in the Laravel locale as a sensible default. \\Translate\\Setting::translate('A string to translate', 'fr', \\Illuminate\\Support\\Facades\\App::getLocale()); . You may then edit the locale key in your config/app.php file to define the default locale. ",
    "url": "http://localhost:4000/basic-usage#facade",
    "relUrl": "/basic-usage#facade"
  },"2": {
    "doc": "Basic Usage",
    "title": "API",
    "content": "The Laravel Translate package provides an API for translating any text. The endpoint is defined in the configuration file, but defaults to _translate. The source and target language are automatically detected as described above. A call to the translate API will be cached for 7 days in the browser, to load translations as quickly as possible. The following body content should be encoded to the url. If a translation failed, its respective array element or string will return null. Translating single lines . Request . GET /_translate HTTP/1.1 Accept: application/json Content-Type: application/json { \"line\": \"A line to translate\" } . Response . HTTP/1.1 200 OK Content-Type: application/json { \"translation\": \"The translated line in the detected language\" } . Translating multiple lines . Request . GET /_translate HTTP/1.1 Accept: application/json Content-Type: application/json { \"lines\": [ \"A line to translate\", \"Another line to translate\", ] } . Response . HTTP/1.1 200 OK Content-Type: application/json { \"translations\": [ \"The translated line in the detected language\", \"The second translated line in the detected language\", ] } . Overriding the source and target language . This will translate the line from english to french. Although target_lang and source_lang are not required, either or both may be given to override the default behaviour of the API. Request . GET /_translate HTTP/1.1 Accept: application/json Content-Type: application/json { \"line\": \"A line to translate\", \"target_lang\": \"fr\", \"source_lang\": \"en\" } . Response . HTTP/1.1 200 OK Content-Type: application/json { \"translation\": \"The translated line in the detected language\" } . ",
    "url": "http://localhost:4000/basic-usage#api",
    "relUrl": "/basic-usage#api"
  },"3": {
    "doc": "Basic Usage",
    "title": "JavaScript",
    "content": "Currently under development. Using our javascript tool, you can easily translate any text from Vue, React or just plain javascript. It helps maintain a balance between time taken to translate text and the number of API calls, by collecting translation requests and translating many in one. ",
    "url": "http://localhost:4000/basic-usage#javascript",
    "relUrl": "/basic-usage#javascript"
  },"4": {
    "doc": "Basic Usage",
    "title": "Blade",
    "content": "If you use the blade templating engine to define your frontend, you can make use of our blade directive to quickly translate any text. @trans('Welcome') . The target and source language will be automatically detected, using the default source language from the config and the target language using the detector, . This directive is also accessible through __t, which is shorter and cleaner to use. @__t('Welcome') . The directive will output the translated string. If the original text could not be translated, it will just be returned to ensure a user of your site sees some text. ",
    "url": "http://localhost:4000/basic-usage#blade",
    "relUrl": "/basic-usage#blade"
  },"5": {
    "doc": "Basic Usage",
    "title": "Helper Function",
    "content": "Rather than relying on the facade, you can easily use our helper function which uses the facade in the background. This takes the same arguments as the facade. // Setting from English to French laravelTranslate('Line to Setting', 'fr', 'en'); . The target and source language will be automatically detected if left blank, meaning you can just pass the string in . laravelTranslate('Line to Setting'); . If no arguments are given, an instance of the Translation Manager will be given. If a string is given as the first argument, a translated string is returned. If the translation failed, the original string is returned. This function is also accessible through __t, which is shorter and cleaner to use. echo __t('Welcome'); // Bienvenue echo __t('Welcome', 'not-a-language-so-fails'); // Welcome . ",
    "url": "http://localhost:4000/basic-usage#helper-function",
    "relUrl": "/basic-usage#helper-function"
  },"6": {
    "doc": "Creating Settings",
    "title": "Creating a Setting",
    "content": ". | Create a new setting . | Example | Form Field | Validation | Groups | Tags | Encryption | Complex data types | . | Registering | Advanced . | Setting Types | . | . ",
    "url": "http://localhost:4000/create-settings#creating-a-setting",
    "relUrl": "/create-settings#creating-a-setting"
  },"7": {
    "doc": "Creating Settings",
    "title": "Create a new setting",
    "content": "A setting is a class that extends Settings\\Schema\\UserSetting or Settings\\Schema\\GlobalSetting. You will have to define the form field for the setting (using the form schema generator), and an array or string of Laravel rules to validate the setting against, and a default value and a group. Example . &lt;?php use Settings\\Schema\\Setting; class SiteName extends Setting { /** * The default value of the setting. * * @return mixed */ public function defaultValue() { return 'My Site'; } /** * The field schema to show the user when editing the value. * * @throws \\Exception * @return Field */ public function fieldOptions(): Field { return \\FormSchema\\Generator\\Field::textInput($this-&gt;inputName()); } /** * Return the validation rules for the setting. * * The key to use for the rules is data. You may also override the validator method to customise the validator further * * @return array */ public function rules(): array { return [ $this-&gt;inputName() =&gt; 'string|min:2|max:20' ]; } /** * @return string */ public static function group(): string { return 'branding'; } } . A setting is a class that extends a setting type such as Settings\\Schema\\UserSetting or Settings\\Schema\\GlobalSetting. Form Field . Using the form schema generator . Mention default variable use . Validation . Groups . Groups are a way to order settings to the user. By grouping together similar settings (such as those related to the site theme, authentication, emails etc), it helps users quickly find what they’re looking for. Tags . What are they, adding to the setting with tags() . Encryption . Complex data types . Saving arrays and objects, like normal. Can override the serialisation method with toString and toValue set on the setting? . ",
    "url": "http://localhost:4000/create-settings#create-a-new-setting",
    "relUrl": "/create-settings#create-a-new-setting"
  },"8": {
    "doc": "Creating Settings",
    "title": "Registering",
    "content": ". | How to register a setting | How to add extra tags | . ",
    "url": "http://localhost:4000/create-settings#registering",
    "relUrl": "/create-settings#registering"
  },"9": {
    "doc": "Creating Settings",
    "title": "Advanced",
    "content": "Setting Types . By default, you have the setting types global and user. The global setting type is set once, and will be the same for everyone. But a user setting will return a different value depending on which user is logged in. For some sites, the settings will depend on the team a user is in, the module you’re operating in, or the country you’re in. When creating a setting, you can assign it to be of one type. Whenever you then get the value of that setting, it will depend on the model logged in. To create a new type, create an abstract class that implements Settings\\Contracts\\SettingType. abstract class TeamSettingType implements \\Settings\\Contracts\\SettingType { /** * Get the ID of the currently logged in model (in this case, the team id) * * Returning null will just return the setting value as the default value. * * @return int|null */ public function resolveId(): ?int { if(\\App\\Team\\Resolver::hasCurrentTeam()) { return \\App\\Team\\Resolver::currentTeam()-&gt;id(); } return null; } } . ",
    "url": "http://localhost:4000/create-settings#advanced",
    "relUrl": "/create-settings#advanced"
  },"10": {
    "doc": "Creating Settings",
    "title": "Creating Settings",
    "content": " ",
    "url": "http://localhost:4000/create-settings",
    "relUrl": "/create-settings"
  },"11": {
    "doc": "Get Settings",
    "title": "Get Settings",
    "content": ". | Getting a setting value . | Getting values for types | . | Getting setting information | . ",
    "url": "http://localhost:4000/get-settings",
    "relUrl": "/get-settings"
  },"12": {
    "doc": "Get Settings",
    "title": "Getting a setting value",
    "content": "The easiest way to get the value of a setting is by referencing the setting class directly, e.g. \\Acme\\Setting\\SiteName::getValue(). You can also use . | The facade: \\Settings\\Setting::getValue(\\Acme\\Setting\\SiteName::class) | The helper: settings(\\Settings\\Setting::class) | . Getting values for types . For setting types like users and teams, where the setting value depends on the session, you can use the same function. This will automatically resolve the current user/team/model from the session and use that. If you do pass an ID in as the first parameter though, it will get the setting value for the given model instead. ",
    "url": "http://localhost:4000/get-settings#getting-a-setting-value",
    "relUrl": "/get-settings#getting-a-setting-value"
  },"13": {
    "doc": "Get Settings",
    "title": "Getting setting information",
    "content": "To display the settings to users, you need to get information about the registered settings. These all use the setting service class, which you can access through the facade or the helper (passing it no parameters). Group . | Get all settings from a group: settings()-&gt;fromGroup('group-name') Tags | Get all settings with a given tag: \\Settings\\Setting::withTag('tag-name') | Get all settings with any of the given tags: settings()-&gt;withAnyTags(['tag-name', 'tag-name-2']) | Get all settings with all the given tags: settings()-&gt;withAllTags(['tag-name', 'tag-name-2']) Types | Get all settings of a certain type: settings()-&gt;withType(\\Acme\\Setting\\TeamSettingType::class) | . These will all return a Settings\\Support\\SettingCollection instance. You can use this like a normal Laravel instance, but you will also have access to the following functions . | asForm() - turn the settings into a \\FormSchema\\Schema\\Form. | toKeyValuePair() - get all settings and their values as key value pairs. | . ",
    "url": "http://localhost:4000/get-settings#getting-setting-information",
    "relUrl": "/get-settings#getting-setting-information"
  },"14": {
    "doc": "Introduction",
    "title": "Laravel Settings",
    "content": "Contents . | Introduction | Installation | . ",
    "url": "http://localhost:4000/index#laravel-settings",
    "relUrl": "/index#laravel-settings"
  },"15": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "http://localhost:4000/index",
    "relUrl": "/index"
  },"16": {
    "doc": "Introduction",
    "title": "Installation",
    "content": "All you need to do to use this project is pull it into an existing Laravel app using composer. composer require twigger/laravel-settings . You can publish the configuration file by running . php artisan vendor:publish --provider=\"Settings\\SettingsServiceProvider\" . ",
    "url": "http://localhost:4000/index#installation",
    "relUrl": "/index#installation"
  },"17": {
    "doc": "Integrate",
    "title": "Basic Usage",
    "content": ". | API . | Get a setting value | Set a setting value(s) | Get all setting values | . | Validation | Creating a settings page | . ",
    "url": "http://localhost:4000/integrating#basic-usage",
    "relUrl": "/integrating#basic-usage"
  },"18": {
    "doc": "Integrate",
    "title": "API",
    "content": "This package comes with an API for updating the settings. Get a setting value . GET /setting/{key} . Set a setting value(s) . POST /setting [ {“value”: “setting-value”} ] . Get all setting values . GET /setting . ",
    "url": "http://localhost:4000/integrating#api",
    "relUrl": "/integrating#api"
  },"19": {
    "doc": "Integrate",
    "title": "Validation",
    "content": "If you use your own API to update settings, or a standard web request, you can use the following validation rule to check all the given settings are valid according to their validation rules . | settings - the given attribute must be an array of settings as key value pairs | . ",
    "url": "http://localhost:4000/integrating#validation",
    "relUrl": "/integrating#validation"
  },"20": {
    "doc": "Integrate",
    "title": "Creating a settings page",
    "content": "Using the methods to get setting values as a form in the get settings docs, you can get a Form instance of the settings you want to show. These will be in groups, depending on the group defined in the setting. Pass this schema to the frontend and render it using a dynamic form generator. If you want to give the groups more information, such as a proper title and description, you may set it in config. &lt;?php // config/settings.php return [ 'groups' =&gt; [ 'security' [ 'title' =&gt; 'Security', 'subtitle' =&gt; 'Settings related to the security of the site' ], ... ] ] ] . ",
    "url": "http://localhost:4000/integrating#creating-a-settings-page",
    "relUrl": "/integrating#creating-a-settings-page"
  },"21": {
    "doc": "Integrate",
    "title": "Integrate",
    "content": " ",
    "url": "http://localhost:4000/integrating",
    "relUrl": "/integrating"
  },"22": {
    "doc": "JS",
    "title": "JavaScript",
    "content": ". | Vue | Setting Keys | JS | . ",
    "url": "http://localhost:4000/js#javascript",
    "relUrl": "/js#javascript"
  },"23": {
    "doc": "JS",
    "title": "Vue",
    "content": "Since the frontend makes use of the settings too, it’s easy to use this package directly from your js. You will need to install the js package. If using Vue, add the following to your app.js file. Here we use 1 as the model ID, replace with whatever the actual model ID is` . import Settings from '@twigger/settings'; Vue.use(Settings); . Then in your Vue app . &lt;template&gt; Setting value: { { $setting.get('key', 1) } } &lt;/template&gt; &lt;!--...--&gt; computed: { description() { return this.$setting.get('key', 1) } } . ",
    "url": "http://localhost:4000/js#vue",
    "relUrl": "/js#vue"
  },"24": {
    "doc": "JS",
    "title": "Setting Keys",
    "content": "On the PHP side, since all settings are class based it’s impossible to use the incorrect setting key. To keep this consistency in js, the keys can be retrieved from a json object. This is automatically generated for you. For our site name example (\\Acme\\Settings\\SiteName), this looks like . { acme: { settings: { siteName: SettingObject } } } . You can access this object with this.$setting.keys. Once you have a setting object, you can call the following functions . | this.$setting.keys.acme.settings.siteName.get(1) - Get the value for the model with an ID 1 | ...siteName.get() - Get the default value/global setting value | ...siteName.set('value', 1) - Set the value for the model 1 | ...siteName.set('value') - Set the default/global value | . ",
    "url": "http://localhost:4000/js#setting-keys",
    "relUrl": "/js#setting-keys"
  },"25": {
    "doc": "JS",
    "title": "JS",
    "content": "Using functions directly . import {getSetting, keys} from '@twigger/settings' getSetting('key', 1) // keys is an object of keys as above . ",
    "url": "http://localhost:4000/js",
    "relUrl": "/js"
  },"26": {
    "doc": "Set Settings",
    "title": "Set Settings",
    "content": ". | Set a setting value . | Setting types | . | . ",
    "url": "http://localhost:4000/set-settings",
    "relUrl": "/set-settings"
  },"27": {
    "doc": "Set Settings",
    "title": "Set a setting value",
    "content": "To set a setting, you can use the setValue method on the setting, such as Acme\\Setting\\SiteName::setValue('New site name'). This will set the setting value, or throw a validation exception if there was a problem with the value. Setting types . Most setting types (such as user and team settings) have a value that depends on the current session. For these settings, you may pass in the ID of the user/team/model as a second parameter. \\Acme\\Setting\\Team2FAEnabled::setValue(true, 5) will enable 2FA for the team with an ID of 5. For the settings that depend on a model like this, if you don’t pass an ID in as the second parameter it will be automatically resolved from the session. To update the default, which will affect any users that haven’t changed their settings yet, you can use \\Acme\\Setting\\Team2FAEnabled::setDefaultValue(true) to enable 2FA by default. ",
    "url": "http://localhost:4000/set-settings#set-a-setting-value",
    "relUrl": "/set-settings#set-a-setting-value"
  }
}
