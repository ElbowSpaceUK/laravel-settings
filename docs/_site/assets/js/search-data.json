{"0": {
    "doc": "Basic Usage",
    "title": "Basic Usage",
    "content": ". ",
    "url": "/basic-usage",
    "relUrl": "/basic-usage"
  },"1": {
    "doc": "Creating Settings",
    "title": "Creating a Setting",
    "content": ". | Create a new setting . | Example | Form Field | Validation | Groups | Tags | Encryption | Complex data types | . | Registering | Advanced . | Setting Types | . | . ",
    "url": "/create-settings#creating-a-setting",
    "relUrl": "/create-settings#creating-a-setting"
  },"2": {
    "doc": "Creating Settings",
    "title": "Create a new setting",
    "content": "A setting is a class that extends Settings\\Schema\\UserSetting or Settings\\Schema\\GlobalSetting. You will have to define the form field for the setting (using the form schema generator), and an array or string of Laravel rules to validate the setting against, and a default value and a group. Example . &lt;?php use Settings\\Schema\\Setting; class SiteName extends Setting { /** * The default value of the setting. * * @return mixed */ public function defaultValue() { return 'My Site'; } /** * The field schema to show the user when editing the value. * * @throws \\Exception * @return Field */ public function fieldOptions(): Field { return \\FormSchema\\Generator\\Field::textInput($this-&gt;inputName()); } /** * Return the validation rules for the setting. * * The key to use for the rules is data. You may also override the validator method to customise the validator further * * @return array */ public function rules(): array { return [ $this-&gt;inputName() =&gt; 'string|min:2|max:20' ]; } /** * @return string */ public static function group(): string { return 'branding'; } } . A setting is a class that extends a setting type such as Settings\\Schema\\UserSetting or Settings\\Schema\\GlobalSetting. Form Field . Using the form schema generator . Mention default variable use . Validation . Groups . Groups are a way to order settings to the user. By grouping together similar settings (such as those related to the site theme, authentication, emails etc), it helps users quickly find what they’re looking for. Tags . What are they, adding to the setting with tags() . Encryption . Complex data types . Saving arrays and objects, like normal. Can override the serialisation method with toString and toValue set on the setting? . ",
    "url": "/create-settings#create-a-new-setting",
    "relUrl": "/create-settings#create-a-new-setting"
  },"3": {
    "doc": "Creating Settings",
    "title": "Registering",
    "content": ". | How to register a setting | How to add extra tags | . ",
    "url": "/create-settings#registering",
    "relUrl": "/create-settings#registering"
  },"4": {
    "doc": "Creating Settings",
    "title": "Advanced",
    "content": "Setting Types . By default, you have the setting types global and user. The global setting type is set once, and will be the same for everyone. But a user setting will return a different value depending on which user is logged in. For some sites, the settings will depend on the team a user is in, the module you’re operating in, or the country you’re in. When creating a setting, you can assign it to be of one type. Whenever you then get the value of that setting, it will depend on the model logged in. To create a new type, create an abstract class that implements Settings\\Contracts\\SettingType. abstract class TeamSettingType implements \\Settings\\Contracts\\SettingType { /** * Get the ID of the currently logged in model (in this case, the team id) * * Returning null will just return the setting value as the default value. * * @return int|null */ public function resolveId(): ?int { if(\\App\\Team\\Resolver::hasCurrentTeam()) { return \\App\\Team\\Resolver::currentTeam()-&gt;id(); } return null; } } . ",
    "url": "/create-settings#advanced",
    "relUrl": "/create-settings#advanced"
  },"5": {
    "doc": "Creating Settings",
    "title": "Creating Settings",
    "content": " ",
    "url": "/create-settings",
    "relUrl": "/create-settings"
  },"6": {
    "doc": "Get Settings",
    "title": "Get Settings",
    "content": ". | Getting a setting value . | Getting values for types | . | Getting setting information | . ",
    "url": "/get-settings",
    "relUrl": "/get-settings"
  },"7": {
    "doc": "Get Settings",
    "title": "Getting a setting value",
    "content": "The easiest way to get the value of a setting is by referencing the setting class directly, e.g. \\Acme\\Setting\\SiteName::getValue(). You can also use . | The facade: \\Settings\\Setting::getValue(\\Acme\\Setting\\SiteName::class) | The helper: settings(\\Settings\\Setting::class) | . Getting values for types . For setting types like users and teams, where the setting value depends on the session, you can use the same function. This will automatically resolve the current user/team/model from the session and use that. If you do pass an ID in as the first parameter though, it will get the setting value for the given model instead. ",
    "url": "/get-settings#getting-a-setting-value",
    "relUrl": "/get-settings#getting-a-setting-value"
  },"8": {
    "doc": "Get Settings",
    "title": "Getting setting information",
    "content": "To display the settings to users, you need to get information about the registered settings. These all use the setting service class, which you can access through the facade or the helper (passing it no parameters). Group . | Get all settings from a group: settings()-&gt;fromGroup('group-name') Tags | Get all settings with a given tag: \\Settings\\Setting::withTag('tag-name') | Get all settings with any of the given tags: settings()-&gt;withAnyTags(['tag-name', 'tag-name-2']) | Get all settings with all the given tags: settings()-&gt;withAllTags(['tag-name', 'tag-name-2']) Types | Get all settings of a certain type: settings()-&gt;withType(\\Acme\\Setting\\TeamSettingType::class) | . These will all return a Settings\\Support\\SettingCollection instance. You can use this like a normal Laravel instance, but you will also have access to the following functions . | asForm() - turn the settings into a \\FormSchema\\Schema\\Form. | toKeyValuePair() - get all settings and their values as key value pairs. | . ",
    "url": "/get-settings#getting-setting-information",
    "relUrl": "/get-settings#getting-setting-information"
  },"9": {
    "doc": "Introduction",
    "title": "Laravel Settings",
    "content": "Contents . | Introduction | Installation | . ",
    "url": "/index#laravel-settings",
    "relUrl": "/index#laravel-settings"
  },"10": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "/index",
    "relUrl": "/index"
  },"11": {
    "doc": "Introduction",
    "title": "Installation",
    "content": "All you need to do to use this project is pull it into an existing Laravel app using composer. composer require twigger/laravel-settings . You can publish the configuration file by running . php artisan vendor:publish --provider=\"Settings\\SettingsServiceProvider\" . ",
    "url": "/index#installation",
    "relUrl": "/index#installation"
  },"12": {
    "doc": "Integrate",
    "title": "Basic Usage",
    "content": ". | API . | Get a setting value . | Request | Response | . | Set a setting value(s) . | Request | Response | . | Get all setting values . | Request | Response | . | . | Validation | Creating a settings page | . ",
    "url": "/integrating#basic-usage",
    "relUrl": "/integrating#basic-usage"
  },"13": {
    "doc": "Integrate",
    "title": "API",
    "content": "This package comes with an API for updating the settings. Get a setting value . Request . GET /_setting/{key} HTTP/1.1 Accept: application/json Content-Type: application/json . Response . HTTP/1.1 200 OK Content-Type: application/json { \"setting\": { key: '', value: '', updated_at: '' } } . Set a setting value(s) . POST /setting [ {“value”: “setting-value”} ] . Request . POST /_setting HTTP/1.1 Accept: application/json Content-Type: application/json { \"settings\": { \"key1\": \"First setting\", \"key2\": \"Second setting\" ] } . Response . HTTP/1.1 204 No Content Content-Type: application/json . Get all setting values . Request . GET /_setting HTTP/1.1 Accept: application/json Content-Type: application/json . Response . HTTP/1.1 200 OK Content-Type: application/json { \"settings\": [ { key: '', value: '', updated_at: '' }, {...}, ] } . ",
    "url": "/integrating#api",
    "relUrl": "/integrating#api"
  },"14": {
    "doc": "Integrate",
    "title": "Validation",
    "content": "If you use your own API to update settings, or a standard web request, you can use the following validation rule to check all the given settings are valid according to their validation rules . | settings - the given attribute must be an array of settings as key value pairs | . ",
    "url": "/integrating#validation",
    "relUrl": "/integrating#validation"
  },"15": {
    "doc": "Integrate",
    "title": "Creating a settings page",
    "content": "Using the methods to get setting values as a form in the get settings docs, you can get a Form instance of the settings you want to show. These will be in groups, depending on the group defined in the setting. Pass this schema to the frontend and render it using a dynamic form generator. If you want to give the groups more information, such as a proper title and description, you may set it in config. &lt;?php // config/settings.php return [ 'groups' =&gt; [ 'security' [ 'title' =&gt; 'Security', 'subtitle' =&gt; 'Settings related to the security of the site' ], ... ] ] ] . ",
    "url": "/integrating#creating-a-settings-page",
    "relUrl": "/integrating#creating-a-settings-page"
  },"16": {
    "doc": "Integrate",
    "title": "Integrate",
    "content": " ",
    "url": "/integrating",
    "relUrl": "/integrating"
  },"17": {
    "doc": "JS",
    "title": "JavaScript",
    "content": ". | Vue | Setting Keys | JS | . ",
    "url": "/js#javascript",
    "relUrl": "/js#javascript"
  },"18": {
    "doc": "JS",
    "title": "Vue",
    "content": "Since the frontend makes use of the settings too, it’s easy to use this package directly from your js. You will need to install the js package. If using Vue, add the following to your app.js file. Here we use 1 as the model ID, replace with whatever the actual model ID is` . import Settings from '@twigger/settings'; Vue.use(Settings); . Then in your Vue app . &lt;template&gt; Setting value: { { $setting.get('key', 1) } } &lt;/template&gt; &lt;!--...--&gt; computed: { description() { return this.$setting.get('key', 1) } } . ",
    "url": "/js#vue",
    "relUrl": "/js#vue"
  },"19": {
    "doc": "JS",
    "title": "Setting Keys",
    "content": "On the PHP side, since all settings are class based it’s impossible to use the incorrect setting key. To keep this consistency in js, the keys can be retrieved from a json object. This is automatically generated for you. For our site name example (\\Acme\\Settings\\SiteName), this looks like . { acme: { settings: { siteName: SettingObject } } } . You can access this object with this.$setting.keys. Once you have a setting object, you can call the following functions . | this.$setting.keys.acme.settings.siteName.get(1) - Get the value for the model with an ID 1 | ...siteName.get() - Get the default value/global setting value | ...siteName.set('value', 1) - Set the value for the model 1 | ...siteName.set('value') - Set the default/global value | . ",
    "url": "/js#setting-keys",
    "relUrl": "/js#setting-keys"
  },"20": {
    "doc": "JS",
    "title": "JS",
    "content": "Using functions directly . import {getSetting, keys} from '@twigger/settings' getSetting('key', 1) // keys is an object of keys as above . ",
    "url": "/js",
    "relUrl": "/js"
  },"21": {
    "doc": "Set Settings",
    "title": "Set Settings",
    "content": ". | Set a setting value . | Setting types | . | . ",
    "url": "/set-settings",
    "relUrl": "/set-settings"
  },"22": {
    "doc": "Set Settings",
    "title": "Set a setting value",
    "content": "To set a setting, you can use the setValue method on the setting, such as Acme\\Setting\\SiteName::setValue('New site name'). This will set the setting value, or throw a validation exception if there was a problem with the value. Setting types . Most setting types (such as user and team settings) have a value that depends on the current session. For these settings, you may pass in the ID of the user/team/model as a second parameter. \\Acme\\Setting\\Team2FAEnabled::setValue(true, 5) will enable 2FA for the team with an ID of 5. For the settings that depend on a model like this, if you don’t pass an ID in as the second parameter it will be automatically resolved from the session. To update the default, which will affect any users that haven’t changed their settings yet, you can use \\Acme\\Setting\\Team2FAEnabled::setDefaultValue(true) to enable 2FA by default. ",
    "url": "/set-settings#set-a-setting-value",
    "relUrl": "/set-settings#set-a-setting-value"
  }
}
